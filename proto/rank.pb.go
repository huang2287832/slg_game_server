// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: rank.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 查看排行榜
type ShowRankReq struct {
	Key                  RankEnum `protobuf:"varint,1,opt,name=key,proto3,enum=proto.RankEnum" json:"key,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShowRankReq) Reset()         { *m = ShowRankReq{} }
func (m *ShowRankReq) String() string { return proto.CompactTextString(m) }
func (*ShowRankReq) ProtoMessage()    {}
func (*ShowRankReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_rank_e9617fcee290bf2c, []int{0}
}
func (m *ShowRankReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowRankReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowRankReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShowRankReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowRankReq.Merge(dst, src)
}
func (m *ShowRankReq) XXX_Size() int {
	return m.Size()
}
func (m *ShowRankReq) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowRankReq.DiscardUnknown(m)
}

var xxx_messageInfo_ShowRankReq proto.InternalMessageInfo

func (m *ShowRankReq) GetKey() RankEnum {
	if m != nil {
		return m.Key
	}
	return RankEnum_Rank_Pass
}

// 登录响应
type ShowRankResp struct {
	MyRank               int32    `protobuf:"varint,1,opt,name=my_rank,json=myRank,proto3" json:"my_rank,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	RankObj              []*Rank  `protobuf:"bytes,3,rep,name=rank_obj,json=rankObj" json:"rank_obj,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShowRankResp) Reset()         { *m = ShowRankResp{} }
func (m *ShowRankResp) String() string { return proto.CompactTextString(m) }
func (*ShowRankResp) ProtoMessage()    {}
func (*ShowRankResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_rank_e9617fcee290bf2c, []int{1}
}
func (m *ShowRankResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShowRankResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShowRankResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ShowRankResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShowRankResp.Merge(dst, src)
}
func (m *ShowRankResp) XXX_Size() int {
	return m.Size()
}
func (m *ShowRankResp) XXX_DiscardUnknown() {
	xxx_messageInfo_ShowRankResp.DiscardUnknown(m)
}

var xxx_messageInfo_ShowRankResp proto.InternalMessageInfo

func (m *ShowRankResp) GetMyRank() int32 {
	if m != nil {
		return m.MyRank
	}
	return 0
}

func (m *ShowRankResp) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *ShowRankResp) GetRankObj() []*Rank {
	if m != nil {
		return m.RankObj
	}
	return nil
}

type Rank struct {
	RankNum              int32       `protobuf:"varint,1,opt,name=rank_num,json=rankNum,proto3" json:"rank_num,omitempty"`
	PlayerAttr           *PlayerAttr `protobuf:"bytes,3,opt,name=player_attr,json=playerAttr" json:"player_attr,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Rank) Reset()         { *m = Rank{} }
func (m *Rank) String() string { return proto.CompactTextString(m) }
func (*Rank) ProtoMessage()    {}
func (*Rank) Descriptor() ([]byte, []int) {
	return fileDescriptor_rank_e9617fcee290bf2c, []int{2}
}
func (m *Rank) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Rank) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Rank.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Rank) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rank.Merge(dst, src)
}
func (m *Rank) XXX_Size() int {
	return m.Size()
}
func (m *Rank) XXX_DiscardUnknown() {
	xxx_messageInfo_Rank.DiscardUnknown(m)
}

var xxx_messageInfo_Rank proto.InternalMessageInfo

func (m *Rank) GetRankNum() int32 {
	if m != nil {
		return m.RankNum
	}
	return 0
}

func (m *Rank) GetPlayerAttr() *PlayerAttr {
	if m != nil {
		return m.PlayerAttr
	}
	return nil
}

func init() {
	proto.RegisterType((*ShowRankReq)(nil), "proto.ShowRankReq")
	proto.RegisterType((*ShowRankResp)(nil), "proto.ShowRankResp")
	proto.RegisterType((*Rank)(nil), "proto.Rank")
}
func (m *ShowRankReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowRankReq) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.Key))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *ShowRankResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShowRankResp) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.MyRank != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.MyRank))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintRank(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.RankObj) > 0 {
		for _, msg := range m.RankObj {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintRank(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *Rank) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rank) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RankNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.RankNum))
	}
	if m.PlayerAttr != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintRank(dAtA, i, uint64(m.PlayerAttr.Size()))
		n1, err := m.PlayerAttr.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintRank(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ShowRankReq) Size() (n int) {
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovRank(uint64(m.Key))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShowRankResp) Size() (n int) {
	var l int
	_ = l
	if m.MyRank != 0 {
		n += 1 + sovRank(uint64(m.MyRank))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovRank(uint64(l))
	}
	if len(m.RankObj) > 0 {
		for _, e := range m.RankObj {
			l = e.Size()
			n += 1 + l + sovRank(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Rank) Size() (n int) {
	var l int
	_ = l
	if m.RankNum != 0 {
		n += 1 + sovRank(uint64(m.RankNum))
	}
	if m.PlayerAttr != nil {
		l = m.PlayerAttr.Size()
		n += 1 + l + sovRank(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovRank(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozRank(x uint64) (n int) {
	return sovRank(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShowRankReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowRankReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowRankReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (RankEnum(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShowRankResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShowRankResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShowRankResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyRank", wireType)
			}
			m.MyRank = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyRank |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankObj", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RankObj = append(m.RankObj, &Rank{})
			if err := m.RankObj[len(m.RankObj)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rank) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRank
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rank: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rank: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RankNum", wireType)
			}
			m.RankNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RankNum |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerAttr", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRank
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRank
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerAttr == nil {
				m.PlayerAttr = &PlayerAttr{}
			}
			if err := m.PlayerAttr.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRank(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRank
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRank(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRank
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRank
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthRank
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowRank
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipRank(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthRank = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRank   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("rank.proto", fileDescriptor_rank_e9617fcee290bf2c) }

var fileDescriptor_rank_e9617fcee290bf2c = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x8d, 0xcd, 0x4a, 0xc4, 0x30,
	0x14, 0x85, 0x8d, 0x75, 0xfe, 0x6e, 0x64, 0xd4, 0x6c, 0xac, 0x0a, 0xa5, 0x76, 0x21, 0x5d, 0x0d,
	0x52, 0x9f, 0x40, 0xc1, 0xed, 0x28, 0x11, 0xd7, 0x25, 0x95, 0x80, 0x4e, 0xe7, 0xa6, 0x31, 0x26,
	0x48, 0xde, 0xc4, 0x47, 0x72, 0xe9, 0x23, 0x48, 0x7d, 0x11, 0x49, 0xa6, 0xe8, 0xac, 0x12, 0xee,
	0xf7, 0x9d, 0x73, 0x00, 0x8c, 0x50, 0xed, 0x42, 0x9b, 0xce, 0x76, 0x6c, 0x14, 0x9f, 0xd3, 0xb9,
	0x54, 0x0e, 0xad, 0xd7, 0x72, 0x73, 0x2e, 0x2e, 0x81, 0x3e, 0x3c, 0x77, 0xef, 0x5c, 0xa8, 0x96,
	0xcb, 0x57, 0x76, 0x0e, 0x49, 0x2b, 0x7d, 0x4a, 0x72, 0x52, 0xce, 0xab, 0x83, 0x8d, 0xb3, 0x08,
	0xf0, 0x56, 0x39, 0xe4, 0x81, 0x15, 0x6b, 0xd8, 0xff, 0x4f, 0xbc, 0x69, 0x76, 0x0c, 0x13, 0xf4,
	0x75, 0x58, 0x8a, 0xb1, 0x11, 0x1f, 0xa3, 0x0f, 0x90, 0x9d, 0xc1, 0x4c, 0xbd, 0x3c, 0xb5, 0xb5,
	0x12, 0x28, 0xd3, 0xdd, 0x9c, 0x94, 0x33, 0x3e, 0x0d, 0x87, 0xa5, 0x40, 0xc9, 0x2e, 0x60, 0x1a,
	0x22, 0x75, 0xd7, 0xac, 0xd2, 0x24, 0x4f, 0x4a, 0x5a, 0xd1, 0xad, 0x35, 0x3e, 0x09, 0xf0, 0xae,
	0x59, 0x15, 0x8f, 0xb0, 0x17, 0xcb, 0x4e, 0x06, 0x5f, 0x39, 0x1c, 0x66, 0xa2, 0xb2, 0x74, 0xc8,
	0x2a, 0xa0, 0x7a, 0x2d, 0xbc, 0x34, 0xb5, 0xb0, 0xd6, 0xa4, 0x49, 0x4e, 0x4a, 0x5a, 0x1d, 0x0d,
	0x6d, 0xf7, 0x91, 0x5c, 0x5b, 0x6b, 0x38, 0xe8, 0xbf, 0xff, 0xcd, 0xe1, 0x67, 0x9f, 0x91, 0xaf,
	0x3e, 0x23, 0xdf, 0x7d, 0x46, 0x3e, 0x7e, 0xb2, 0x9d, 0x66, 0x1c, 0xfd, 0xab, 0xdf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x8d, 0xff, 0x72, 0x5c, 0x34, 0x01, 0x00, 0x00,
}

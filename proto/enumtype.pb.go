// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: enumtype.proto

package proto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProtoCmd int32

const (
	ProtoCmd_CMD_PASS          ProtoCmd = 0
	ProtoCmd_CMD_ErrResp       ProtoCmd = 1
	ProtoCmd_CMD_HeartBeatReq  ProtoCmd = 2
	ProtoCmd_CMD_HeartBeatResp ProtoCmd = 3
	ProtoCmd_CMD_LoginReq      ProtoCmd = 1001
	ProtoCmd_CMD_LoginResp     ProtoCmd = 1002
	ProtoCmd_CMD_LogoutReq     ProtoCmd = 1003
	ProtoCmd_CMD_ShowRankReq   ProtoCmd = 2001
	ProtoCmd_CMD_ShowRankResp  ProtoCmd = 2002
)

var ProtoCmd_name = map[int32]string{
	0:    "CMD_PASS",
	1:    "CMD_ErrResp",
	2:    "CMD_HeartBeatReq",
	3:    "CMD_HeartBeatResp",
	1001: "CMD_LoginReq",
	1002: "CMD_LoginResp",
	1003: "CMD_LogoutReq",
	2001: "CMD_ShowRankReq",
	2002: "CMD_ShowRankResp",
}
var ProtoCmd_value = map[string]int32{
	"CMD_PASS":          0,
	"CMD_ErrResp":       1,
	"CMD_HeartBeatReq":  2,
	"CMD_HeartBeatResp": 3,
	"CMD_LoginReq":      1001,
	"CMD_LoginResp":     1002,
	"CMD_LogoutReq":     1003,
	"CMD_ShowRankReq":   2001,
	"CMD_ShowRankResp":  2002,
}

func (x ProtoCmd) String() string {
	return proto.EnumName(ProtoCmd_name, int32(x))
}
func (ProtoCmd) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enumtype_829a9ecd51d5f7be, []int{0}
}

type RankEnum int32

const (
	RankEnum_Rank_Pass  RankEnum = 0
	RankEnum_Rank_Power RankEnum = 1
)

var RankEnum_name = map[int32]string{
	0: "Rank_Pass",
	1: "Rank_Power",
}
var RankEnum_value = map[string]int32{
	"Rank_Pass":  0,
	"Rank_Power": 1,
}

func (x RankEnum) String() string {
	return proto.EnumName(RankEnum_name, int32(x))
}
func (RankEnum) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_enumtype_829a9ecd51d5f7be, []int{1}
}

type PlayerAttr struct {
	UserId               int32    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	NickName             string   `protobuf:"bytes,2,opt,name=nick_name,json=nickName,proto3" json:"nick_name,omitempty"`
	Sign                 string   `protobuf:"bytes,3,opt,name=sign,proto3" json:"sign,omitempty"`
	X                    int32    `protobuf:"varint,4,opt,name=X,proto3" json:"X,omitempty"`
	Y                    int32    `protobuf:"varint,5,opt,name=Y,proto3" json:"Y,omitempty"`
	Country              int32    `protobuf:"varint,6,opt,name=Country,proto3" json:"Country,omitempty"`
	Level                int32    `protobuf:"varint,7,opt,name=Level,proto3" json:"Level,omitempty"`
	Exp                  int32    `protobuf:"varint,8,opt,name=Exp,proto3" json:"Exp,omitempty"`
	Wood                 int32    `protobuf:"varint,9,opt,name=Wood,proto3" json:"Wood,omitempty"`
	Iron                 int32    `protobuf:"varint,10,opt,name=Iron,proto3" json:"Iron,omitempty"`
	Stone                int32    `protobuf:"varint,11,opt,name=Stone,proto3" json:"Stone,omitempty"`
	Forage               int32    `protobuf:"varint,12,opt,name=Forage,proto3" json:"Forage,omitempty"`
	Gold                 int32    `protobuf:"varint,13,opt,name=Gold,proto3" json:"Gold,omitempty"`
	Diamond              int32    `protobuf:"varint,14,opt,name=Diamond,proto3" json:"Diamond,omitempty"`
	BindDiamond          int32    `protobuf:"varint,15,opt,name=BindDiamond,proto3" json:"BindDiamond,omitempty"`
	Decree               int32    `protobuf:"varint,16,opt,name=Decree,proto3" json:"Decree,omitempty"`
	ArmyOrder            int32    `protobuf:"varint,17,opt,name=ArmyOrder,proto3" json:"ArmyOrder,omitempty"`
	Power                int32    `protobuf:"varint,18,opt,name=Power,proto3" json:"Power,omitempty"`
	Domain               int32    `protobuf:"varint,19,opt,name=Domain,proto3" json:"Domain,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerAttr) Reset()         { *m = PlayerAttr{} }
func (m *PlayerAttr) String() string { return proto.CompactTextString(m) }
func (*PlayerAttr) ProtoMessage()    {}
func (*PlayerAttr) Descriptor() ([]byte, []int) {
	return fileDescriptor_enumtype_829a9ecd51d5f7be, []int{0}
}
func (m *PlayerAttr) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerAttr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerAttr.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *PlayerAttr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerAttr.Merge(dst, src)
}
func (m *PlayerAttr) XXX_Size() int {
	return m.Size()
}
func (m *PlayerAttr) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerAttr.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerAttr proto.InternalMessageInfo

func (m *PlayerAttr) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PlayerAttr) GetNickName() string {
	if m != nil {
		return m.NickName
	}
	return ""
}

func (m *PlayerAttr) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *PlayerAttr) GetX() int32 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *PlayerAttr) GetY() int32 {
	if m != nil {
		return m.Y
	}
	return 0
}

func (m *PlayerAttr) GetCountry() int32 {
	if m != nil {
		return m.Country
	}
	return 0
}

func (m *PlayerAttr) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerAttr) GetExp() int32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *PlayerAttr) GetWood() int32 {
	if m != nil {
		return m.Wood
	}
	return 0
}

func (m *PlayerAttr) GetIron() int32 {
	if m != nil {
		return m.Iron
	}
	return 0
}

func (m *PlayerAttr) GetStone() int32 {
	if m != nil {
		return m.Stone
	}
	return 0
}

func (m *PlayerAttr) GetForage() int32 {
	if m != nil {
		return m.Forage
	}
	return 0
}

func (m *PlayerAttr) GetGold() int32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *PlayerAttr) GetDiamond() int32 {
	if m != nil {
		return m.Diamond
	}
	return 0
}

func (m *PlayerAttr) GetBindDiamond() int32 {
	if m != nil {
		return m.BindDiamond
	}
	return 0
}

func (m *PlayerAttr) GetDecree() int32 {
	if m != nil {
		return m.Decree
	}
	return 0
}

func (m *PlayerAttr) GetArmyOrder() int32 {
	if m != nil {
		return m.ArmyOrder
	}
	return 0
}

func (m *PlayerAttr) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *PlayerAttr) GetDomain() int32 {
	if m != nil {
		return m.Domain
	}
	return 0
}

func init() {
	proto.RegisterType((*PlayerAttr)(nil), "proto.PlayerAttr")
	proto.RegisterEnum("proto.ProtoCmd", ProtoCmd_name, ProtoCmd_value)
	proto.RegisterEnum("proto.RankEnum", RankEnum_name, RankEnum_value)
}
func (m *PlayerAttr) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerAttr) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.UserId != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.UserId))
	}
	if len(m.NickName) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(len(m.NickName)))
		i += copy(dAtA[i:], m.NickName)
	}
	if len(m.Sign) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(len(m.Sign)))
		i += copy(dAtA[i:], m.Sign)
	}
	if m.X != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.X))
	}
	if m.Y != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Y))
	}
	if m.Country != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Country))
	}
	if m.Level != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Level))
	}
	if m.Exp != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Exp))
	}
	if m.Wood != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Wood))
	}
	if m.Iron != 0 {
		dAtA[i] = 0x50
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Iron))
	}
	if m.Stone != 0 {
		dAtA[i] = 0x58
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Stone))
	}
	if m.Forage != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Forage))
	}
	if m.Gold != 0 {
		dAtA[i] = 0x68
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Gold))
	}
	if m.Diamond != 0 {
		dAtA[i] = 0x70
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Diamond))
	}
	if m.BindDiamond != 0 {
		dAtA[i] = 0x78
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.BindDiamond))
	}
	if m.Decree != 0 {
		dAtA[i] = 0x80
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Decree))
	}
	if m.ArmyOrder != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.ArmyOrder))
	}
	if m.Power != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Power))
	}
	if m.Domain != 0 {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintEnumtype(dAtA, i, uint64(m.Domain))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintEnumtype(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlayerAttr) Size() (n int) {
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovEnumtype(uint64(m.UserId))
	}
	l = len(m.NickName)
	if l > 0 {
		n += 1 + l + sovEnumtype(uint64(l))
	}
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovEnumtype(uint64(l))
	}
	if m.X != 0 {
		n += 1 + sovEnumtype(uint64(m.X))
	}
	if m.Y != 0 {
		n += 1 + sovEnumtype(uint64(m.Y))
	}
	if m.Country != 0 {
		n += 1 + sovEnumtype(uint64(m.Country))
	}
	if m.Level != 0 {
		n += 1 + sovEnumtype(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovEnumtype(uint64(m.Exp))
	}
	if m.Wood != 0 {
		n += 1 + sovEnumtype(uint64(m.Wood))
	}
	if m.Iron != 0 {
		n += 1 + sovEnumtype(uint64(m.Iron))
	}
	if m.Stone != 0 {
		n += 1 + sovEnumtype(uint64(m.Stone))
	}
	if m.Forage != 0 {
		n += 1 + sovEnumtype(uint64(m.Forage))
	}
	if m.Gold != 0 {
		n += 1 + sovEnumtype(uint64(m.Gold))
	}
	if m.Diamond != 0 {
		n += 1 + sovEnumtype(uint64(m.Diamond))
	}
	if m.BindDiamond != 0 {
		n += 1 + sovEnumtype(uint64(m.BindDiamond))
	}
	if m.Decree != 0 {
		n += 2 + sovEnumtype(uint64(m.Decree))
	}
	if m.ArmyOrder != 0 {
		n += 2 + sovEnumtype(uint64(m.ArmyOrder))
	}
	if m.Power != 0 {
		n += 2 + sovEnumtype(uint64(m.Power))
	}
	if m.Domain != 0 {
		n += 2 + sovEnumtype(uint64(m.Domain))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovEnumtype(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozEnumtype(x uint64) (n int) {
	return sovEnumtype(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerAttr) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEnumtype
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerAttr: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerAttr: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NickName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnumtype
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NickName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEnumtype
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field X", wireType)
			}
			m.X = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.X |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Y", wireType)
			}
			m.Y = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Y |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Country", wireType)
			}
			m.Country = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Country |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Wood", wireType)
			}
			m.Wood = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Wood |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Iron", wireType)
			}
			m.Iron = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Iron |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stone", wireType)
			}
			m.Stone = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stone |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Forage", wireType)
			}
			m.Forage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Forage |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gold", wireType)
			}
			m.Gold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Gold |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Diamond", wireType)
			}
			m.Diamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Diamond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindDiamond", wireType)
			}
			m.BindDiamond = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BindDiamond |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decree", wireType)
			}
			m.Decree = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decree |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArmyOrder", wireType)
			}
			m.ArmyOrder = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ArmyOrder |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Domain", wireType)
			}
			m.Domain = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Domain |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEnumtype(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEnumtype
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEnumtype(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEnumtype
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEnumtype
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthEnumtype
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowEnumtype
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipEnumtype(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthEnumtype = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEnumtype   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("enumtype.proto", fileDescriptor_enumtype_829a9ecd51d5f7be) }

var fileDescriptor_enumtype_829a9ecd51d5f7be = []byte{
	// 474 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0xcb, 0x6e, 0xd3, 0x4c,
	0x14, 0xc7, 0x33, 0x4d, 0x73, 0xf1, 0xc9, 0xc5, 0x93, 0xf3, 0xa5, 0x1f, 0x23, 0x81, 0xa2, 0x88,
	0x55, 0xe9, 0x82, 0x0d, 0x4f, 0x90, 0x1b, 0x50, 0xa9, 0x80, 0xe5, 0x2c, 0x68, 0x57, 0xd1, 0x50,
	0x8f, 0x82, 0xd5, 0x78, 0xc6, 0x8c, 0x6d, 0x4a, 0xde, 0x84, 0xa7, 0xe9, 0x9a, 0x25, 0xf0, 0x04,
	0x28, 0xac, 0x80, 0x97, 0x40, 0x67, 0xa6, 0x55, 0x23, 0x56, 0xfe, 0xff, 0x7e, 0x63, 0xfd, 0xcf,
	0xf1, 0x05, 0xfa, 0x4a, 0x57, 0x59, 0xb9, 0xcd, 0xd5, 0xd3, 0xdc, 0x9a, 0xd2, 0x60, 0xc3, 0x5d,
	0x1e, 0xdf, 0xd4, 0x01, 0xa2, 0x8d, 0xdc, 0x2a, 0x3b, 0x29, 0x4b, 0x8b, 0x0f, 0xa0, 0x55, 0x15,
	0xca, 0xae, 0xd2, 0x44, 0xb0, 0x31, 0x3b, 0x6e, 0xc4, 0x4d, 0xc2, 0xd3, 0x04, 0x1f, 0x42, 0xa0,
	0xd3, 0xcb, 0xab, 0x95, 0x96, 0x99, 0x12, 0x07, 0x63, 0x76, 0x1c, 0xc4, 0x6d, 0x12, 0xaf, 0x65,
	0xa6, 0x10, 0xe1, 0xb0, 0x48, 0xd7, 0x5a, 0xd4, 0x9d, 0x77, 0x19, 0xbb, 0xc0, 0xce, 0xc5, 0xa1,
	0xeb, 0x60, 0xe7, 0x44, 0x17, 0xa2, 0xe1, 0xe9, 0x02, 0x05, 0xb4, 0x66, 0xa6, 0xd2, 0xa5, 0xdd,
	0x8a, 0xa6, 0x73, 0x77, 0x88, 0x43, 0x68, 0x9c, 0xa9, 0x8f, 0x6a, 0x23, 0x5a, 0xce, 0x7b, 0x40,
	0x0e, 0xf5, 0xc5, 0xa7, 0x5c, 0xb4, 0x9d, 0xa3, 0x48, 0x13, 0xdf, 0x1a, 0x93, 0x88, 0xc0, 0x29,
	0x97, 0xc9, 0x9d, 0x5a, 0xa3, 0x05, 0x78, 0x47, 0x99, 0xfa, 0x96, 0xa5, 0xd1, 0x4a, 0x74, 0x7c,
	0x9f, 0x03, 0xfc, 0x1f, 0x9a, 0xcf, 0x8d, 0x95, 0x6b, 0x25, 0xba, 0xfe, 0x21, 0x3d, 0x51, 0xc3,
	0x0b, 0xb3, 0x49, 0x44, 0xcf, 0x37, 0x50, 0xa6, 0x5d, 0xe7, 0xa9, 0xcc, 0x8c, 0x4e, 0x44, 0xdf,
	0xef, 0x7a, 0x8b, 0x38, 0x86, 0xce, 0x34, 0xd5, 0xc9, 0xdd, 0x69, 0xe8, 0x4e, 0xf7, 0x15, 0xcd,
	0x99, 0xab, 0x4b, 0xab, 0x94, 0xe0, 0x7e, 0x8e, 0x27, 0x7c, 0x04, 0xc1, 0xc4, 0x66, 0xdb, 0x37,
	0x36, 0x51, 0x56, 0x0c, 0xdc, 0xd1, 0xbd, 0xa0, 0x9d, 0x23, 0x73, 0xad, 0xac, 0x40, 0xbf, 0xb3,
	0x03, 0xd7, 0x65, 0x32, 0x99, 0x6a, 0xf1, 0xdf, 0x6d, 0x97, 0xa3, 0x93, 0x1b, 0x06, 0xed, 0x88,
	0x3e, 0xe5, 0x2c, 0x4b, 0xb0, 0x0b, 0xed, 0xd9, 0xab, 0xf9, 0x2a, 0x9a, 0x2c, 0x97, 0xbc, 0x86,
	0x21, 0x74, 0x88, 0x16, 0xd6, 0xc6, 0xaa, 0xc8, 0x39, 0xc3, 0x21, 0x70, 0x12, 0x2f, 0x95, 0xb4,
	0xe5, 0x54, 0xc9, 0x32, 0x56, 0x1f, 0xf8, 0x01, 0x1e, 0xc1, 0xe0, 0x1f, 0x5b, 0xe4, 0xbc, 0x8e,
	0x03, 0xe8, 0x92, 0x3e, 0x33, 0xeb, 0x54, 0xd3, 0x8d, 0xbf, 0x5a, 0x88, 0xd0, 0xdb, 0x53, 0x45,
	0xce, 0x7f, 0xef, 0x3b, 0x53, 0xb9, 0xc2, 0x3f, 0x2d, 0x1c, 0x42, 0x48, 0x6e, 0xf9, 0xde, 0x5c,
	0xc7, 0x52, 0x5f, 0x91, 0xfd, 0x16, 0xe2, 0x91, 0x9f, 0x7e, 0x6f, 0x8b, 0x9c, 0x7f, 0x0f, 0x4f,
	0x9e, 0x40, 0x9b, 0x70, 0xa1, 0xab, 0x0c, 0x7b, 0x10, 0x50, 0x5e, 0x45, 0xb2, 0x28, 0x78, 0x0d,
	0xfb, 0x00, 0x1e, 0xe9, 0x0d, 0x70, 0x36, 0xe5, 0x5f, 0x76, 0x23, 0xf6, 0x75, 0x37, 0x62, 0x3f,
	0x76, 0x23, 0xf6, 0xf9, 0xe7, 0xa8, 0xf6, 0xae, 0xe9, 0xfe, 0xe2, 0x67, 0x7f, 0x03, 0x00, 0x00,
	0xff, 0xff, 0xc5, 0x84, 0xb8, 0x96, 0xde, 0x02, 0x00, 0x00,
}
